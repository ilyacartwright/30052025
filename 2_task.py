class SortingHat:
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è —à–ª—è–ø–∞ –•–æ–≥–≤–∞—Ä—Ç—Å–∞"""
    
    def __init__(self):
        self.houses = {
            '–ì—Ä–∏—Ñ—Ñ–∏–Ω–¥–æ—Ä': {'main_skill': '—Ö—Ä–∞–±—Ä–æ—Å—Ç—å', 'priority': 1},
            '–ö–æ–≥—Ç–µ–≤—Ä–∞–Ω': {'main_skill': '—É–º', 'priority': 2}, 
            '–ü—É—Ñ—Ñ–µ–Ω–¥—É–π': {'main_skill': '–Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å', 'priority': 3},
            '–°–ª–∏–∑–µ—Ä–∏–Ω': {'main_skill': '—Ö–∏—Ç—Ä–æ—Å—Ç—å', 'priority': 4}
        }
        
        self.skills = {
            '—Ö—Ä–∞–±—Ä–æ—Å—Ç—å': 0,
            '—É–º': 1, 
            '–Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å': 2,
            '—Ö–∏—Ç—Ä–æ—Å—Ç—å': 3
        }
    
    def calculate_house_score(self, student_skills, house_name):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        
        Args:
            student_skills (list): [—Ö—Ä–∞–±—Ä–æ—Å—Ç—å, —É–º, –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, —Ö–∏—Ç—Ä–æ—Å—Ç—å]
            house_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
            
        Returns:
            int: –°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª —Å —É—á–µ—Ç–æ–º —É–¥–≤–æ–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞
        """
        main_skill = self.houses[house_name]['main_skill']
        main_skill_index = self.skills[main_skill]
        
        total_score = sum(student_skills) + student_skills[main_skill_index]
        
        return total_score
    
    def find_best_house(self, student_skills):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        
        Args:
            student_skills (list): [—Ö—Ä–∞–±—Ä–æ—Å—Ç—å, —É–º, –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, —Ö–∏—Ç—Ä–æ—Å—Ç—å]
            
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        """
        house_scores = {}
        
        for house_name in self.houses:
            score = self.calculate_house_score(student_skills, house_name)
            house_scores[house_name] = score
        
        max_score = max(house_scores.values())
        
        best_houses = [house for house, score in house_scores.items() if score == max_score]
        
        if len(best_houses) > 1:
            best_houses.sort(key=lambda house: self.houses[house]['priority'])
        
        return best_houses[0]
    
    def sort_students(self, students):
        """
        –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º
        
        Args:
            students (list): –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏–º—è, [—Ö—Ä–∞–±—Ä–æ—Å—Ç—å, —É–º, –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, —Ö–∏—Ç—Ä–æ—Å—Ç—å])
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å {—Ñ–∞–∫—É–ª—å—Ç–µ—Ç: [—Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤]}
        """
        result = {house: [] for house in self.houses}
        sorting_details = []
        
        for name, skills in students:
            house_scores = {}
            for house_name in self.houses:
                score = self.calculate_house_score(skills, house_name)
                house_scores[house_name] = score
            
            chosen_house = self.find_best_house(skills)
            result[chosen_house].append(name)
            
            sorting_details.append({
                'name': name,
                'skills': skills,
                'scores': house_scores,
                'chosen_house': chosen_house
            })
        
        return result, sorting_details
    
    def print_sorting_ceremony(self, students):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ—Ä–µ–º–æ–Ω–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
        print("üé© –¶–ï–†–ï–ú–û–ù–ò–Ø –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –í –•–û–ì–í–ê–†–¢–°–ï üé©")
        print("=" * 60)
        
        sorted_houses, details = self.sort_students(students)
        
        for detail in details:
            print(f"\nüë§ {detail['name']}")
            print(f"   –ù–∞–≤—ã–∫–∏: –•—Ä–∞–±—Ä–æ—Å—Ç—å={detail['skills'][0]}, –£–º={detail['skills'][1]}, "
                  f"–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å={detail['skills'][2]}, –•–∏—Ç—Ä–æ—Å—Ç—å={detail['skills'][3]}")
            print("   –ë–∞–ª–ª—ã –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º:")
            
            for house, score in detail['scores'].items():
                main_skill = self.houses[house]['main_skill']
                print(f"     {house}: {score} (–æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–≤—ã–∫: {main_skill})")
            
            print(f"   üè∞ –†–ï–ó–£–õ–¨–¢–ê–¢: {detail['chosen_house']}!")
        
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:")
        print("=" * 60)
        
        for house, students_list in sorted_houses.items():
            print(f"\nüèõÔ∏è  {house}: {len(students_list)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            if students_list:
                for student in students_list:
                    print(f"    ‚Ä¢ {student}")
            else:
                print("    ‚Ä¢ (–ø—É—Å—Ç–æ)")
        
        return sorted_houses

def hogwarts_example():
    """–ü—Ä–∏–º–µ—Ä —Ü–µ—Ä–µ–º–æ–Ω–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
    
    hat = SortingHat()
    
    new_students = [
        ("–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä", [9, 7, 8, 6]),
        ("–ì–µ—Ä–º–∏–æ–Ω–∞ –ì—Ä–µ–π–Ω–¥–∂–µ—Ä", [8, 10, 9, 7]),
        ("–†–æ–Ω –£–∏–∑–ª–∏", [8, 6, 7, 5]),
        ("–î—Ä–∞–∫–æ –ú–∞–ª—Ñ–æ–π", [6, 8, 7, 9]),
        ("–ü–æ–ª—É–º–Ω–∞ –õ–∞–≤–≥—É–¥", [7, 9, 6, 8]),
        ("–°–µ–¥—Ä–∏–∫ –î–∏–≥–≥–æ—Ä–∏", [7, 8, 10, 6]),
        ("–ù–µ–≤–∏–ª–ª –î–æ–ª–≥–æ–ø—É–ø—Å", [5, 6, 9, 4])
    ]
    
    return hat.print_sorting_ceremony(new_students)

def test_single_student(name, skills):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    hat = SortingHat()
    
    print(f"üéì –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞: {name}")
    print(f"–ù–∞–≤—ã–∫–∏: {skills}")
    
    house_scores = {}
    for house_name in hat.houses:
        score = hat.calculate_house_score(skills, house_name)
        house_scores[house_name] = score
        main_skill = hat.houses[house_name]['main_skill']
        print(f"{house_name}: {score} –±–∞–ª–ª–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π: {main_skill})")
    
    chosen_house = hat.find_best_house(skills)
    print(f"\nüè∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {chosen_house}!")
    
    return chosen_house

hogwarts_example()