def find_max_steel_blocks(A, B, C):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ —Å—Ç–∞–ª–∏ –¥–ª—è –º–µ—á–∞ –≤ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç
    
    –§–æ—Ä–º—É–ª–∞ —Ü–µ–Ω—ã: –¶–µ–Ω–∞ = A + B * N
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –¶–µ–Ω–∞ <= C
    
    Args:
        A (int): –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ—Ä–µ–≤–∞ –¥–ª—è —Ä—É–∫–æ—è—Ç–∏ (–∏–∑—É–º—Ä—É–¥—ã)
        B (int): –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Å—Ç–∞–ª–∏ (–∏–∑—É–º—Ä—É–¥—ã)  
        C (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞, –∫–æ—Ç–æ—Ä—É—é –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∂–∏—Ç–µ–ª–∏ (–∏–∑—É–º—Ä—É–¥—ã)
        
    Returns:
        int: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ —Å—Ç–∞–ª–∏ –∏–ª–∏ -1 –µ—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ
    """
    
    if B <= 0:
        return float('inf') if A <= C else -1
    
    if A > C:
        return -1
    
    
    max_blocks = (C - A) // B 
    
    return max_blocks

def calculate_sword_price(A, B, N):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ü–µ–Ω—É –º–µ—á–∞ —Å N –±–ª–æ–∫–∞–º–∏ —Å—Ç–∞–ª–∏"""
    return A + B * N

def optimize_sword_crafting(A, B, C, show_details=True):
    """
    –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—Ä–∞—Ñ—Ç–∞ –º–µ—á–µ–π
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    """
    
    max_blocks = find_max_steel_blocks(A, B, C)
    
    if show_details:
        print("‚öîÔ∏è  –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ö–†–ê–§–¢–ê –ú–ï–ß–ï–ô –í –ú–ê–ô–ù–ö–†–ê–§–¢ ‚öîÔ∏è")
        print("=" * 55)
        print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä—É–∫–æ—è—Ç–∏ (A): {A} –∏–∑—É–º—Ä—É–¥–æ–≤")
        print(f"üî© –°—Ç–æ–∏–º–æ—Å—Ç—å –±–ª–æ–∫–∞ —Å—Ç–∞–ª–∏ (B): {B} –∏–∑—É–º—Ä—É–¥–æ–≤")
        print(f"üíé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –∂–∏—Ç–µ–ª–µ–π (C): {C} –∏–∑—É–º—Ä—É–¥–æ–≤")
        print()
        
        if max_blocks == -1:
            print("‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: –ñ–∏—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –∫—É–ø–∏—Ç—å –¥–∞–∂–µ –±–∞–∑–æ–≤—ã–π –º–µ—á!")
            print(f"   –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {A} –∏–∑—É–º—Ä—É–¥–æ–≤ > –ë—é–¥–∂–µ—Ç: {C} –∏–∑—É–º—Ä—É–¥–æ–≤")
            return {'max_blocks': -1, 'max_price': 0, 'profit': 0}
        
        elif max_blocks == float('inf'):
            print("‚ôæÔ∏è  –†–ï–ó–£–õ–¨–¢–ê–¢: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –±–ª–æ–∫–∏ —Å—Ç–∞–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ!")
            print("   (–ë–ª–æ–∫–∏ —Å—Ç–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã –∏–ª–∏ –¥–∞—é—Ç –¥–µ–Ω—å–≥–∏)")
            return {'max_blocks': float('inf'), 'max_price': float('inf'), 'profit': float('inf')}
        
        else:
            max_price = calculate_sword_price(A, B, max_blocks)
            base_price = A
            
            print(f"‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ú–∞–∫—Å–∏–º—É–º {max_blocks} –±–ª–æ–∫–æ–≤ —Å—Ç–∞–ª–∏")
            print(f"   –¶–µ–Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–µ—á–∞: {max_price} –∏–∑—É–º—Ä—É–¥–æ–≤")
            print(f"   –ü—Ä–∏–±—ã–ª—å –æ—Ç —É–ª—É—á—à–µ–Ω–∏–π: +{max_price - base_price} –∏–∑—É–º—Ä—É–¥–æ–≤")
            print()
            
            print("üìä –í–ê–†–ò–ê–ù–¢–´ –ú–ï–ß–ï–ô:")
            print("-" * 40)
            
            for n in range(min(max_blocks + 2, 6)):
                price = calculate_sword_price(A, B, n)
                affordable = "‚úÖ" if price <= C else "‚ùå"
                if n == max_blocks:
                    status = f"{affordable} –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô"
                elif price > C:
                    status = f"{affordable} –°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ"
                else:
                    status = f"{affordable} –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å"
                    
                print(f"  {n} –±–ª–æ–∫–æ–≤: {price} –∏–∑—É–º—Ä—É–¥–æ–≤ {status}")
            
            if max_blocks >= 5:
                print("  ...")
                price = calculate_sword_price(A, B, max_blocks)
                print(f"  {max_blocks} –±–ª–æ–∫–æ–≤: {price} –∏–∑—É–º—Ä—É–¥–æ–≤ ‚úÖ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô")
            
            return {
                'max_blocks': max_blocks, 
                'max_price': max_price, 
                'profit': max_price - base_price
            }

def test_multiple_scenarios():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∫—Ä–∞—Ñ—Ç–∞"""
    
    scenarios = [
        {"A": 10, "B": 5, "C": 50, "name": "–û–±—ã—á–Ω–∞—è –¥–µ—Ä–µ–≤–Ω—è"},
        {"A": 15, "B": 3, "C": 30, "name": "–ë–µ–¥–Ω–∞—è –¥–µ—Ä–µ–≤–Ω—è"},
        {"A": 5, "B": 10, "C": 100, "name": "–ë–æ–≥–∞—Ç–∞—è –¥–µ—Ä–µ–≤–Ω—è"},
        {"A": 20, "B": 8, "C": 15, "name": "–ù–µ–≤–æ–∑–º–æ–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è"},
        {"A": 10, "B": 0, "C": 50, "name": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–∞–ª—å"},
    ]
    
    print("üèòÔ∏è  –ê–ù–ê–õ–ò–ó –†–ê–ó–ù–´–• –î–ï–†–ï–í–ï–ù–¨")
    print("=" * 60)
    
    results = []
    
    for scenario in scenarios:
        print(f"\nüè† {scenario['name']}:")
        print("-" * 30)
        
        result = optimize_sword_crafting(
            scenario["A"], 
            scenario["B"], 
            scenario["C"], 
            show_details=False
        )
        
        max_blocks = result['max_blocks']
        
        if max_blocks == -1:
            print("‚ùå –ñ–∏—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –∫—É–ø–∏—Ç—å –¥–∞–∂–µ –±–∞–∑–æ–≤—ã–π –º–µ—á")
        elif max_blocks == float('inf'):
            print("‚ôæÔ∏è  –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç–∞–ª—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ")
        else:
            max_price = result['max_price']
            profit = result['profit']
            print(f"‚úÖ –ú–∞–∫—Å–∏–º—É–º: {max_blocks} –±–ª–æ–∫–æ–≤ —Å—Ç–∞–ª–∏")
            print(f"   –¶–µ–Ω–∞: {max_price} –∏–∑—É–º—Ä—É–¥–æ–≤ (+{profit} –∫ –±–∞–∑–æ–≤–æ–π)")
        
        results.append({**scenario, **result})
    
    return results

def interactive_calculator():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤"""
    
    print("üéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ú–ï–ß–ï–ô")
    print("=" * 40)
    print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–µ—á–∞:")
    
    try:
        A = int(input("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä—É–∫–æ—è—Ç–∏ (A): "))
        B = int(input("üî© –°—Ç–æ–∏–º–æ—Å—Ç—å –±–ª–æ–∫–∞ —Å—Ç–∞–ª–∏ (B): "))
        C = int(input("üíé –ë—é–¥–∂–µ—Ç –∂–∏—Ç–µ–ª–µ–π (C): "))
        
        print()
        result = optimize_sword_crafting(A, B, C)
        return result
        
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!")
        return None

def quick_formula(A, B, C):
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    
    Returns:
        int: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ —Å—Ç–∞–ª–∏
    """
    if A > C:
        return -1
    if B <= 0:
        return float('inf')
    return (C - A) // B

def minecraft_guide():
    """–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç"""
    
    print("üéÆ –ì–ê–ô–î –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ú–ï–ß–ï–ô –í –ú–ê–ô–ù–ö–†–ê–§–¢")
    print("=" * 50)
    print()
    print("üìù –§–û–†–ú–£–õ–ê –¶–ï–ù–´ –ú–ï–ß–ê:")
    print("   –¶–µ–Ω–∞ = A + B √ó N")
    print("   –≥–¥–µ:")
    print("   ‚Ä¢ A = —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ—Ä–µ–≤–∞ –¥–ª—è —Ä—É–∫–æ—è—Ç–∏")
    print("   ‚Ä¢ B = —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Å—Ç–∞–ª–∏") 
    print("   ‚Ä¢ N = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ —Å—Ç–∞–ª–∏")
    print("   ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –¶–µ–Ω–∞ ‚â§ C (–±—é–¥–∂–µ—Ç –∂–∏—Ç–µ–ª–µ–π)")
    print()
    
    print("üßÆ –ë–´–°–¢–†–ê–Ø –§–û–†–ú–£–õ–ê:")
    print("   –ú–∞–∫—Å–∏–º—É–º –±–ª–æ–∫–æ–≤ = (C - A) √∑ B (–æ–∫—Ä—É–≥–ª–∏—Ç—å –≤–Ω–∏–∑)")
    print()
    
    print("‚ö†Ô∏è  –û–°–û–ë–´–ï –°–õ–£–ß–ê–ò:")
    print("   ‚Ä¢ –ï—Å–ª–∏ A > C ‚Üí –∂–∏—Ç–µ–ª–∏ –Ω–µ –∫—É–ø—è—Ç –¥–∞–∂–µ –±–∞–∑–æ–≤—ã–π –º–µ—á")
    print("   ‚Ä¢ –ï—Å–ª–∏ B = 0 ‚Üí –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –±–ª–æ–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ")
    print("   ‚Ä¢ –ï—Å–ª–∏ (C - A) < B ‚Üí —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –º–µ—á –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π")
    print()
    
    print("üí° –°–¢–†–ê–¢–ï–ì–ò–ò:")
    print("   1. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–∫—Å–∏–º—É–º –±–ª–æ–∫–æ–≤ —Å—Ç–∞–ª–∏")
    print("   2. –ï—Å–ª–∏ A —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–æ - –Ω–∞–π–¥–∏—Ç–µ –±–æ–ª–µ–µ –¥–µ—à–µ–≤–æ–µ –¥–µ—Ä–µ–≤–æ")
    print("   3. –¢–æ—Ä–≥—É–π—Ç–µ—Å—å —Å –∫—É–∑–Ω–µ—Ü–∞–º–∏ –∑–∞ –±–æ–ª–µ–µ –¥–µ—à–µ–≤—É—é —Å—Ç–∞–ª—å")
    print("   4. –ò—â–∏—Ç–µ –±–æ–≥–∞—Ç—ã—Ö –∂–∏—Ç–µ–ª–µ–π —Å –±–æ–ª—å—à–∏–º –±—é–¥–∂–µ—Ç–æ–º C")
    print()
    
    examples = [
        (10, 5, 50, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è"),
        (15, 3, 30, "–ë–µ–¥–Ω–∞—è –¥–µ—Ä–µ–≤–Ω—è"),
        (5, 10, 100, "–ë–æ–≥–∞—Ç–∞—è –¥–µ—Ä–µ–≤–Ω—è"),
        (20, 8, 15, "–°–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ")
    ]
    
    print("üìä –ü–†–ò–ú–ï–†–´ –†–ê–°–ß–ï–¢–û–í:")
    print("-" * 30)
    
    for A, B, C, desc in examples:
        max_blocks = quick_formula(A, B, C)
        if max_blocks == -1:
            result = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ"
        elif max_blocks == float('inf'):
            result = "–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ"
        else:
            price = A + B * max_blocks
            result = f"{max_blocks} –±–ª–æ–∫–æ–≤ ({price} –∏–∑—É–º—Ä—É–¥–æ–≤)"
        
        print(f"{desc}:")
        print(f"  A={A}, B={B}, C={C} ‚Üí {result}")

minecraft_guide()
    
print("\n" + "="*60)
    

print("üîß –î–ï–¢–ê–õ–¨–ù–´–ô –ü–†–ò–ú–ï–†:")
optimize_sword_crafting(A=10, B=5, C=50)